buildscript {
    repositories {
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:latest.release'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'

group = "org.sekka"
version = '0.0.1'.concat(isMasterBranch() ? '' : '-SNAPSHOT')
archivesBaseName = "SekkaAPI"

println 'Current Branch  ' + gitBranch()
println 'Current Version ' + project.version

def _BINTRAY_USER = System.getenv('BINTRAY_USER') != null ? System.getenv('BINTRAY_USER') : BINTRAY_USER
def _BINTRAY_KEY = System.getenv('BINTRAY_KEY') != null ? System.getenv('BINTRAY_KEY') : BINTRAY_KEY
def _REPO_KEY = isMasterBranch() ? 'oss-release-local' : 'oss-snapshot-local'
def _PUBLISH_CFG = isMasterBranch() ? 'mavenRelease' : 'mavenSnapshot'

sourceCompatibility = targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url = 'https://oss.jfrog.org/artifactory/oss-release-local/'
    }
    maven {
        url = 'https://oss.jfrog.org/artifactory/oss-snapshot-local/'
    }
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    compile 'org.soraworld:hocon:1.2.1-SNAPSHOT'
    compileOnly('org.spongepowered:spongeapi:7.1.0-SNAPSHOT') {
        transitive = false
    }
    compileOnly('org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT') {
        transitive = false
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenRelease(MavenPublication) {
            from components.java
            groupId = 'org.sekka'
            artifactId = 'sekkaapi'
            version = project.version
            artifact sourcesJar
            artifact javadocJar
        }
        mavenSnapshot(MavenPublication) {
            from components.java
            groupId = 'org.sekka'
            artifactId = 'sekkaapi'
            version = project.version
            artifact sourcesJar
        }
    }
}

bintray {
    key = _BINTRAY_KEY
    user = _BINTRAY_USER
    publications = ['mavenRelease']
    publish = true
    override = true
    pkg {
        repo = 'Minecraft'
        name = 'SekkaAPI'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/Himmelt/SekkaAPI.git'
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = 'Sekka Plugin Library API.'
            released = new Date()
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = _REPO_KEY
            username = _BINTRAY_USER
            password = _BINTRAY_KEY
            maven = true
        }
        defaults {
            publications(_PUBLISH_CFG)
        }
    }
}

static String gitBranch() {
    def branch = System.getenv('CIRCLE_BRANCH')
    if (branch != null) return branch.trim()
    branch = System.getenv('TRAVIS_BRANCH')
    if (branch != null) return branch.trim()
    branch = 'unknown'
    def info = 'git branch'.execute().text.trim()
    info.eachLine { line -> if (line.contains('*')) branch = line.replace('*', '').trim() }
    return branch
}

static boolean isMasterBranch() {
    return gitBranch().equalsIgnoreCase('master')
}
